// routes/import.js
const express = require("express")
const router = express.Router()
const importSchemas = require("../utils/entitySchemas")
const { validateImportRows } = require("../utils/importValidator")
const db = require("../utils/db") // üëà –Ω—É–∂–Ω–æ –¥–ª—è serverTransform

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —Ç–∏–ø—É (templateUrl, headerMap –∏ —Ç.–¥.)
router.get("/schema/:type", (req, res) => {
  const schema = importSchemas[req.params.type]
  if (!schema) return res.status(404).json({ message: "–°—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
  res.json(schema)
})

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (rows —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã —Ñ—Ä–æ–Ω—Ç–æ–º –∏–∑ Excel –ø–æ headerMap)
router.post("/:type", async (req, res) => {
  try {
    const type = req.params.type
    const schema = importSchemas[type]
    if (!schema) return res.status(400).json({ message: "–°—Ö–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })

    // –ü–æ–¥–¥–µ—Ä–∂–∏–º –∏ body=Array, –∏ body={ rows: [...] }
    let rows = Array.isArray(req.body) ? req.body : (Array.isArray(req.body?.rows) ? req.body.rows : [])
    if (!rows.length) {
      return res.status(400).json({ message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞" })
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª—è original_parts —Å—é–¥–∞ –ø—Ä–∏–ª–µ—Ç–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
    const ctx = {
      db,
      req,
      equipment_model_id: Number(req.query?.equipment_model_id ?? req.body?.context?.equipment_model_id)
    }

    // –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç serverTransform ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º (–Ω–∞–ø—Ä., –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å equipment_model_id)
    if (typeof schema.serverTransform === "function") {
      rows = await schema.serverTransform(rows, ctx)
    }

    // –õ–æ–≥–∏ —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å –≤ –µ–¥–∏–Ω–æ–º –∂—É—Ä–Ω–∞–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    const logType = type === "part_suppliers" ? "suppliers" : type

    // –ò–º–ø–æ—Ä—Ç —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (upsert –ø–æ uniqueField / uniqueBy)
    const result = await validateImportRows(rows, {
      table: schema.table,
      uniqueBy: schema.uniqueBy,           // –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      uniqueField: schema.uniqueField,     // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      requiredFields: schema.requiredFields || [],
      req,
      logType
      // mode: "upsert" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    })

    return res.status(200).json(result)
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", err)
    const status = err.status || 500

    // –î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Å—Ç—ã—Ö –∫–µ–π—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (err.message === "MISSING_EQUIPMENT_MODEL_ID") {
      return res.status(400).json({ message: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω equipment_model_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–º–ø–æ—Ä—Ç–∞" })
    }
    if (err.message === "EQUIPMENT_MODEL_NOT_FOUND") {
      return res.status(400).json({ message: "–£–∫–∞–∑–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
    }

    return res.status(status).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ" })
  }
})

module.exports = router
