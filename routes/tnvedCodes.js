const express = require('express');
const router = express.Router();
const db = require('../utils/db');
const authMiddleware = require('../middleware/authMiddleware');
const adminOnly = require('../middleware/adminOnly');
const logActivity = require('../utils/logActivity');
const ExcelJS = require('exceljs');
const { validateImportRows } = require('../utils/importValidator');
const logFieldDiffs = require('../utils/logFieldDiffs')

//----------------------------------------------
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –¢–ù –í–≠–î
//----------------------------------------------
router.get('/', authMiddleware, async (req, res) => {
  try {
    const [codes] = await db.execute('SELECT * FROM tnved_codes ORDER BY code');
    res.json(codes);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –¢–ù –í–≠–î:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

//----------------------------------------------
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–¥–æ–≤ –≤—Ä—É—á–Ω—É—é
//----------------------------------------------
router.post('/', authMiddleware, adminOnly, async (req, res) => {
  const { inserted, errors } = await validateImportRows(
    Array.isArray(req.body) ? req.body : [req.body],
    {
      table: 'tnved_codes',
      uniqueField: 'code',
      requiredFields: ['code'],
      req,
      logType: 'tnved_code'
    }
  );

  res.status(inserted.length ? 201 : 400).json({
    message: inserted.length
      ? `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${inserted.length} –∫–æ–¥–æ–≤`
      : '–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏',
    inserted,
    errors
  });
});

///----------------------------------------------
// –ò–º–ø–æ—Ä—Ç –∏–∑ Excel (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
//----------------------------------------------
router.post('/import', authMiddleware, adminOnly, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–µ–ª–æ ‚Äî –º–∞—Å—Å–∏–≤
    const input = Array.isArray(req.body) ? req.body : [];

    if (!input.length) {
      return res.status(400).json({
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞',
        inserted: [],
        errors: ['–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç—Ä–æ–∫']
      });
    }

    const { inserted, errors } = await validateImportRows(input, {
      table: 'tnved_codes',
      uniqueField: 'code',
      requiredFields: ['code'],
      req,
      logType: 'tnved_code'
    });

    return res.status(200).json({
      message:
        inserted.length > 0
          ? `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${inserted.length}`
          : '–ò–º–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã)',
      inserted,
      errors
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¢–ù –í–≠–î:', err);
    return res.status(500).json({
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ',
      inserted: [],
      errors: [err.message]
    });
  }
});



//----------------------------------------------
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –¢–ù –í–≠–î
//----------------------------------------------
router.put('/:id', authMiddleware, adminOnly, async (req, res) => {
  const { code, description, duty_rate, notes } = req.body

  if (!code) {
    return res.status(400).json({ message: '–ü–æ–ª–µ "code" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' })
  }

  try {
    const [rows] = await db.execute('SELECT * FROM tnved_codes WHERE id = ?', [req.params.id])
    if (rows.length === 0) {
      return res.status(404).json({ message: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const old = rows[0]

    await db.execute(
      `UPDATE tnved_codes
       SET code = ?, description = ?, duty_rate = ?, notes = ?
       WHERE id = ?`,
      [code, description || null, duty_rate || null, notes || null, req.params.id]
    )

    // üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await logFieldDiffs({
      req,
      oldData: old,
      newData: req.body,
      entity_type: 'tnved_code',
      entity_id: req.params.id
    })

    res.json({ message: '–ö–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω' })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', err)
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})
//----------------------------------------------
// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞
//----------------------------------------------
router.delete('/:id', authMiddleware, adminOnly, async (req, res) => {
  try {
    await db.execute('DELETE FROM tnved_codes WHERE id = ?', [req.params.id]);

    await logActivity({
      req,
      action: 'delete',
      entity_type: 'tnved_code',
      entity_id: req.params.id,
      comment: '–ö–æ–¥ –¢–ù –í–≠–î —É–¥–∞–ª—ë–Ω'
    });

    res.json({ message: '–ö–æ–¥ —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});



//----------------------------------------------
// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ Excel
//----------------------------------------------
router.get('/template', authMiddleware, async (req, res) => {
  try {
    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('–ö–æ–¥—ã –¢–ù –í–≠–î');

    sheet.columns = [
      { header: '–ö–æ–¥', key: 'code', width: 20 },
      { header: '–û–ø–∏—Å–∞–Ω–∏–µ', key: 'description', width: 40 },
      { header: '–°—Ç–∞–≤–∫–∞ –ø–æ—à–ª–∏–Ω—ã (%)', key: 'duty_rate', width: 20 },
      { header: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è', key: 'notes', width: 40 }
    ];

    sheet.addRow({
      code: '1234567890',
      description: '–ü—Ä–∏–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è',
      duty_rate: 5,
      notes: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞'
    });

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename=tnved_codes_template.xlsx');

    await workbook.xlsx.write(res);
    res.end();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ Excel:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞' });
  }
});

module.exports = router;
