const express = require('express')
const router = express.Router()
const pool = require('../utils/db')
const authMiddleware = require('../middleware/authMiddleware')
const adminOnly = require('../middleware/adminOnly')

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
router.get('/', authMiddleware, async (req, res) => {
  try {
    const [rows] = await pool.execute('SELECT * FROM tabs ORDER BY sort_order ASC')
    res.json(rows)
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫:', err)
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
  }
})

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤–∫–ª–∞–¥–æ–∫ ‚Äî –í–ê–ñ–ù–û: —Å—Ç–æ–∏—Ç –≤—ã—à–µ —á–µ–º `/:id`
router.put('/order', authMiddleware, adminOnly, async (req, res) => {
  try {
    const updates = req.body // –æ–∂–∏–¥–∞–µ–º [{ id, sort_order }]
    console.log('üì• PUT /tabs/order payload:', JSON.stringify(updates, null, 2))

    if (!Array.isArray(updates)) {
      return res.status(400).json({ message: '–û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤' })
    }

    for (const item of updates) {
      if (
        typeof item.id !== 'number' ||
        typeof item.sort_order !== 'number'
      ) {
        console.warn('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ:', item)
        return res.status(400).json({ message: '–≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è id –∏ sort_order' })
      }
    }

    const promises = updates.map(({ id, sort_order }) =>
      pool.execute('UPDATE tabs SET sort_order = ? WHERE id = ?', [sort_order, id])
    )

    await Promise.all(promises)

    console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –≤–∫–ª–∞–¥–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω')
    res.sendStatus(200)
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–∫–ª–∞–¥–æ–∫:', err)
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
  }
})

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
router.post('/', authMiddleware, adminOnly, async (req, res) => {
  try {
    const { name, tab_name, path, icon } = req.body

    const [[{ maxOrder }]] = await pool.execute('SELECT MAX(sort_order) AS maxOrder FROM tabs')
    const sort_order = (maxOrder ?? 0) + 1

    await pool.execute(
      'INSERT INTO tabs (name, tab_name, path, icon, sort_order) VALUES (?, ?, ?, ?, ?)',
      [name, tab_name, path, icon || null, sort_order]
    )

    res.sendStatus(201)
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', err)
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
  }
})

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
router.put('/:id', authMiddleware, adminOnly, async (req, res) => {
  try {
    let { name, tab_name, path, icon, sort_order } = req.body
    const { id } = req.params

    if (typeof icon === 'undefined') icon = null
    if (typeof sort_order !== 'number') sort_order = 0

    console.log('üì• PUT /tabs/:id body:', req.body)

    await pool.execute(
      'UPDATE tabs SET name = ?, tab_name = ?, path = ?, icon = ?, sort_order = ? WHERE id = ?',
      [name, tab_name, path, icon, sort_order, id]
    )

    res.sendStatus(200)
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', err)
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
  }
})

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤
router.delete('/:id', authMiddleware, adminOnly, async (req, res) => {
  try {
    const { id } = req.params

    await pool.execute('DELETE FROM role_permissions WHERE tab_id = ?', [id])
    const [result] = await pool.execute('DELETE FROM tabs WHERE id = ?', [id])

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: '–í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
    }

    res.status(200).json({ message: '–í–∫–ª–∞–¥–∫–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª–µ–Ω—ã' })
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', err)
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
  }
})

module.exports = router
