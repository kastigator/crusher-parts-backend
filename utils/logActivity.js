// utils/logActivity.js
const db = require('./db')

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É activity_logs
 * @param {Object} options
 * @param {Object} options.req
 * @param {'create'|'update'|'delete'} options.action
 * @param {string} options.entity_type
 * @param {number|string|null} options.entity_id
 * @param {string|null} [options.field_changed]
 * @param {string|number|null} [options.old_value]
 * @param {string|number|null} [options.new_value]
 * @param {string|null} [options.comment]
 * @param {number|null} [options.client_id]
 */
async function logActivity({
  req,
  action,
  entity_type,
  entity_id,
  field_changed = null,
  old_value = null,
  new_value = null,
  comment = null,
  client_id = null
}) {
  try {
    const user_id = req?.user?.id || null

    // üîí –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º action
    const act = String(action || '').trim().toLowerCase()
    const allowed = new Set(['create', 'update', 'delete'])
    if (!allowed.has(act)) {
      console.error('‚ùå logActivity: invalid action:', action)
      return
    }

    // üî¢ –ü—Ä–∏–≤–æ–¥–∏–º entity_id –∫ —á–∏—Å–ª—É –∏–ª–∏ null
    let idNum = null
    if (entity_id !== undefined && entity_id !== null && entity_id !== '') {
      idNum = Number(entity_id)
      if (Number.isNaN(idNum)) {
        console.error('‚ùå logActivity: entity_id is not numeric:', entity_id)
        return
      }
    }

    // ‚úÖ –ê–≤—Ç–æ client_id –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã clients
    if (!client_id && entity_type === 'clients') {
      client_id = idNum
    }

    // üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ)
    console.log('üìù logActivity payload:', {
      user_id, act, entity_type, entity_id: idNum, field_changed, old_value, new_value, comment, client_id
    })

    await db.execute(
      `
      INSERT INTO activity_logs
        (user_id, action, entity_type, entity_id, field_changed, old_value, new_value, comment, client_id)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `,
      [
        user_id,
        act,
        entity_type,
        idNum,
        field_changed ?? null,
        old_value ?? null,
        new_value ?? null,
        comment ?? null,
        client_id ?? null
      ]
    )
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', err.message)
  }
}

module.exports = logActivity
