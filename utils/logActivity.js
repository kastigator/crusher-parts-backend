// utils/logActivity.js
const db = require('./db');

/**
 * –ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É activity_logs
 * @param {Object} options
 * @param {Object} options.req - Express req (–¥–ª—è user_id)
 * @param {'create'|'update'|'delete'} options.action
 * @param {string} options.entity_type
 * @param {number|string|null} options.entity_id
 * @param {string|null} [options.field_changed]
 * @param {string|number|null} [options.old_value]
 * @param {string|number|null} [options.new_value]
 * @param {string|null} [options.comment]
 * @param {number|string|null} [options.client_id] - –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
async function logActivity({
  req,
  action,
  entity_type,
  entity_id,
  field_changed = null,
  old_value = null,
  new_value = null,
  comment = null,
  client_id = null,
}) {
  try {
    const user_id = req?.user?.id ?? null;

    // 1) action
    const act = String(action || '').trim().toLowerCase();
    const allowed = new Set(['create', 'update', 'delete']);
    if (!allowed.has(act)) {
      console.error('‚ùå logActivity: invalid action:', action);
      return;
    }

    // 2) entity_type
    const et = String(entity_type || '').trim();
    if (!et) {
      console.error('‚ùå logActivity: empty entity_type');
      return;
    }

    // 3) entity_id -> number|null
    let idNum = null;
    if (entity_id !== undefined && entity_id !== null && entity_id !== '') {
      idNum = Number(entity_id);
      if (Number.isNaN(idNum)) {
        console.error('‚ùå logActivity: entity_id is not numeric:', entity_id);
        return;
      }
    }

    // 4) client_id -> number|null + –∞–≤—Ç–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    let clientIdNum = null;
    if (client_id !== undefined && client_id !== null && client_id !== '') {
      const tmp = Number(client_id);
      if (!Number.isNaN(tmp)) clientIdNum = tmp;
    }
    if (!clientIdNum && et === 'clients' && idNum != null) {
      // –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–∞–º–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
      clientIdNum = idNum;
    }

    // 5) —Ñ–æ—Ä–º–∏—Ä—É–µ–º INSERT –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤)
    const cols = ['user_id', 'action', 'entity_type', 'entity_id', 'field_changed', 'old_value', 'new_value', 'comment'];
    const vals = [user_id ?? null, act, et, idNum, field_changed ?? null, old_value ?? null, new_value ?? null, comment ?? null];

    // –¥–æ–±–∞–≤–∏–º client_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã—á–∏—Å–ª–∏–ª—Å—è ‚Äî —á—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è –≤ —Å—Ö–µ–º—É
    if (clientIdNum != null) {
      cols.push('client_id');
      vals.push(clientIdNum);
    }

    const placeholders = cols.map(() => '?').join(', ');
    const sql = `INSERT INTO activity_logs (${cols.join(', ')}) VALUES (${placeholders})`;

    // –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥
    if (process.env.DEBUG_LOG_ACTIVITY === '1') {
      console.log('üìù logActivity SQL:', sql, 'VALS:', vals);
    }

    await db.execute(sql, vals);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', err);
  }
}

module.exports = logActivity;
