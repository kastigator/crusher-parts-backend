// utils/logFieldDiffs.js
const logActivity = require("./logActivity")

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø–æ–ª—è–º.
 *
 * @param {Object} options
 * @param {Object} options.req               - Express req (–¥–ª—è user_id)
 * @param {Object} options.oldData           - –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} options.newData           - –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
 * @param {string} options.entity_type       - —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏, –Ω–∞–ø—Ä. 'clients'
 * @param {number|string} options.entity_id  - ID —Å—É—â–Ω–æ—Å—Ç–∏
 * @param {number|null} [options.client_id]  - ID –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
async function logFieldDiffs({ req, oldData, newData, entity_type, entity_id }) {
  // üî¢ –∂—ë—Å—Ç–∫–æ –ø—Ä–∏–≤–æ–¥–∏–º entity_id –∫ —á–∏—Å–ª—É
  const idNum =
    entity_id === undefined || entity_id === null || entity_id === ''
      ? null
      : Number(entity_id)

  if (idNum === null || Number.isNaN(idNum)) {
    console.error("‚ùå logFieldDiffs: invalid entity_id:", entity_id)
    return
  }

  const client_id = oldData?.client_id ?? null

  for (const key in newData) {
    if (!Object.prototype.hasOwnProperty.call(oldData, key)) continue

    const oldVal = oldData[key]
    const newVal = newData[key]

    // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null/undefined
    const oldStr = oldVal == null ? "" : String(oldVal)
    const newStr = newVal == null ? "" : String(newVal)

    if (oldStr !== newStr) {
      await logActivity({
        req,
        action: "update",
        entity_type,
        entity_id: idNum,     // ‚úÖ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–∏—Å–ª–æ
        field_changed: key,
        old_value: oldVal,
        new_value: newVal,
        client_id
      })
    }
  }
}

module.exports = logFieldDiffs
